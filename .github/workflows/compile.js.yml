# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build and Test

on:
  push:
  pull_request:

concurrency:
  group: compile-${{ github.workflow }}-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
  cancel-in-progress: true

jobs:
  validate:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ '20']
    name: Lint test on Node ${{ matrix.node }}
    steps:
      - run: echo ${{github.ref}}

      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          #always-auth: 'true'
          #registry-url: 'https://nexus.tools.services.qld.gov.au/nexus/repository/npm_all/'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: npmrc #run on lint step (Which is cached)
        run: |
          npm -v
          node -v
        #  cat /home/runner/work/_temp/.npmrc #only nice to test when registry is altered
        #env:
        #  NODE_AUTH_TOKEN: ${{ secrets.NEXUSREADONLY2NPMTOKEN }}

      - name: Install
        run: | # Install packages
         npm install --prefer-offline --no-audit --ignore-scripts --force
        #env:
        #  NODE_AUTH_TOKEN: ${{ secrets.NEXUSREADONLY2NPMTOKEN }}

      # `npm rebuild` will run all those post-install scripts for us.
      - name: rebuild and prepare
        run: npm rebuild && npm run prepare --if-present

      - name: Lint
        run: |
          npm run lint
      - name: Test
        run: |
          npm run test

  build:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ '20' ]
    name: Build and Deploy on Node ${{ matrix.node }}
    steps:
      - uses: actions/checkout@v4.1.2

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Use Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          #always-auth: 'true'
          #registry-url: 'https://nexus.tools.services.qld.gov.au/nexus/repository/npm_all/'
          registry-url: 'https://registry.npmjs.org'
      - name: Install #run on lint step (Which is cached)
        run: | # Install packages
          npm install --prefer-offline --no-audit --ignore-scripts
        #env:
        #  NODE_AUTH_TOKEN: ${{ secrets.NEXUSREADONLY2NPMTOKEN }}

      # `npm rebuild` will run all those post-install scripts for us.
      - name: rebuild and prepare
        run: npm rebuild && npm run prepare --if-present

      - name: Build ðŸ”§
        run: | # build the files
          npm run build
#      - name: Build storybook ðŸ”§
#        run: | # build the Storybook files
#          npm run build-storybook

      - name: setup Package
        run: |
          ls -ltr
          mkdir -p ./target/docs
          cp -r ./docs ./target/docs
          cp -r ./dist ./target/dist

      - uses: actions/upload-artifact@v4.3.1
        with:
          name: Package
          path: ./target


      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: display branch name
        shell: bash
        run: echo "${{ steps.extract_branch.outputs.branch }}"


      - name: setup Publish
        run: |
          set -x
          cp -r ./binary-repo/* ./dist

      - name: Publish qgds-qol-dist
        uses: qld-gov-au/gha-publish-to-git@master
        with:
          repository: ${{ vars.TARGET_REPO }}
          git_ref: '${{ github.ref }}'
          branch: '${{ steps.extract_branch.outputs.branch }}'
          github_token: '${{ secrets.GH_TOKEN }}'
          github_pat: '${{ secrets.GH_PAT }}'
          source_folder: dist
          tag_branch: main
        if: success()

      - name: Publish to qld-gov-au/qgds-qol-mvp-cdn
        uses: qld-gov-au/gha-cdn-version-tree-by-tag-builder@main
        with:
          repository: ${{ vars.TARGET_REPO_CDN }}
          git_ref: '${{ github.ref }}'
          branch: 'release'
          github_token: '${{ secrets.GH_TOKEN }}'
          github_pat: '${{ secrets.GH_PAT }}'
          source_folder: dist
        if: success()

      - name: Build Storybook ðŸ”§
        run: | # build the Storybook files
          npm run build-storybook
      - name: Package storybook files
        uses: actions/upload-artifact@v4 #provide nice artifact
        with:
          name: Storybook
          path: storybook-static